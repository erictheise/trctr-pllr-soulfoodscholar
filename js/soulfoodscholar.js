function initMap() {  let    map = L.map('map', {      zoomControl: false,      scrollWheelZoom: true,      minZoom: 4,      maxZoom: 7    }).setView ([39.828175, -98.579500], 3.6)  ;  map.attributionControl.setPrefix(null);  L.control.zoom({position: 'bottomright'}).addTo(map);  L.control.scale({position: 'bottomleft'}).addTo(map);  let circleStyle = {    radius: 4.5,    color: "#ccc",    weight: 1,    opacity: 1,    fillOpacity: 0.8  };  let xhr = new XMLHttpRequest();  xhr.open('GET', 'js/gz_2010_us_040_00_20m.json');  xhr.setRequestHeader('Content-Type', 'application/json');  xhr.onload = function() {    if (xhr.status === 200) {      let states = L.geoJSON(JSON.parse(xhr.responseText), {        style: {          "color": "#999",          "weight": 0.8,          "fillColor": "#360209",          "fillOpacity": 0.9        }      }).addTo(map);      map.fitBounds([[24.9493, -125.0011], [49.5904, -66.9326]]);      map.setMaxBounds([[0, -179.9999], [72.4410, -42]]);      let xhr2 = new XMLHttpRequest();      xhr2.open('GET', 'js/1000.geojson');      xhr2.setRequestHeader('Content-Type', 'application/json');      xhr2.onload = function() {        if (xhr2.status === 200) {          let bev100 = L.geoJSON(JSON.parse(xhr2.responseText), {            pointToLayer: function (feature, latlng) {              if (feature.properties['Soulfood Beverage'] === 'Sweet Tea') {                circleStyle['fillColor'] = '#9e562b'              } else {                if (feature.properties['Soulfood Beverage'] === 'Lemonade') {                  circleStyle['fillColor'] = '#ffdc11'                } else {                  if (feature.properties['Soulfood Beverage'] === 'Red Drink') {                    circleStyle['fillColor'] = '#c91b1f'                  } else {                    if (feature.properties['Soulfood Beverage'] === 'Purple Drank') {                      circleStyle['fillColor'] = '#a729d9'                    }                  }                }              }              return L.circleMarker(latlng, circleStyle);            },            onEachFeature: function(feature,layer){              layer.on('mouseover mousemove', function(e){                let hover_bubble = new L.Rrose({ offset: new L.Point(0,-10), closeButton: false, autoPan: false })                  .setContent(feature.properties['Soulfood Beverage'])                  .setLatLng(e.latlng)                  .openOn(map);              });              layer.on('mouseout', function(e){ map.closePopup() });            }          }).addTo(map);        }      };      xhr2.send();    }  };  xhr.send();}initMap();